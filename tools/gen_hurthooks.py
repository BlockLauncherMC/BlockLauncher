# generate entityvtables with getallentities.py

with open("../jni/hurthook.h", "w") as outfile, open("entityvtables.txt", "r") as infile:
	indata = [a for a in infile.read().split("\n") if a != ""]
	print("#pragma once\n// Autogenerated - do not edit\n" + 
		"typedef int (*bl_entity_hurt_t)(Entity*, EntityDamageSource const&, int, bool, bool);", file=outfile)
	print("static bl_entity_hurt_t " + ",".join(["bl_" + v + "_hurt_real" for v in indata]) + ";", file=outfile)
	for v in indata:
		print("static int bl_" + v + "_hurt_hook(Entity* entity, EntityDamageSource const& damage, int hearts, bool a, bool b) {\n" + 
			"	return bl_Entity_hurt_report(entity, damage, hearts, a, b)? 0: bl_" + v + "_hurt_real(entity, damage, hearts, a, b);\n" +
			"}", file=outfile)
	print("static void bl_entity_hurt_hook_init(soinfo2* mcpelibhandle) {\n	void** vtable;" +
		"\n	int h = vtable_indexes.entity_hurt;", file=outfile)
	for v in indata:
		print("	vtable = (void**) dobby_dlsym(mcpelibhandle, \"" + v + "\");\n"+
			"	bl_" + v + "_hurt_real = (bl_entity_hurt_t) vtable[h];\n" +
			"	vtable[h] = (void*) &bl_" + v + "_hurt_hook;", file=outfile);
	print("}", file=outfile)
